{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "anil-saini-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/csv2csv_if_file_not_exists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check File Existence",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "cargodmdynamic",
								"type": "DatasetReference",
								"parameters": {
									"sourcefilename": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check File Existence",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check File Existence').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "cargods",
											"type": "DatasetReference",
											"parameters": {
												"sourcefilename": {
													"value": "@pipeline().parameters.FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "cargodm",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-24T22:59:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Purchase')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "purcase_order",
								"type": "DatasetReference"
							},
							"name": "purcaseorder"
						},
						{
							"dataset": {
								"referenceName": "purchase_product",
								"type": "DatasetReference"
							},
							"name": "product"
						},
						{
							"dataset": {
								"referenceName": "purchase_customer",
								"type": "DatasetReference"
							},
							"name": "customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "purhcasedm",
								"type": "DatasetReference"
							},
							"name": "StoreOutput"
						}
					],
					"transformations": [
						{
							"name": "OrderProd"
						},
						{
							"name": "OrderProdCust"
						},
						{
							"name": "ColumnProjection"
						},
						{
							"name": "QualityCheck"
						},
						{
							"name": "AddPurcaseValueCol"
						},
						{
							"name": "SumPurchaseValue"
						}
					],
					"scriptLines": [
						"source(output(",
						"          purchase_id as string,",
						"          product_id as string,",
						"          qty as string,",
						"          cus_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> purcaseorder",
						"source(output(",
						"          product_id as string,",
						"          product_name as string,",
						"          price as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> product",
						"source(output(",
						"          cus_id as string,",
						"          cus_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"purcaseorder, product join(purcaseorder@product_id == product@product_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderProd",
						"OrderProd, customer join(purcaseorder@cus_id == customer@cus_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderProdCust",
						"OrderProdCust select(mapColumn(",
						"          qty,",
						"          price,",
						"          cus_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ColumnProjection",
						"ColumnProjection filter(greater(toInteger(qty),0)) ~> QualityCheck",
						"QualityCheck derive(PurchaseValue = toInteger(qty)*toInteger(price)) ~> AddPurcaseValueCol",
						"AddPurcaseValueCol aggregate(groupBy(cus_name),",
						"     PurchaseValue = sum(PurchaseValue)) ~> SumPurchaseValue",
						"SumPurchaseValue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> StoreOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Purchase_CosmosDb')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "purcase_order",
								"type": "DatasetReference"
							},
							"name": "purcaseorder"
						},
						{
							"dataset": {
								"referenceName": "purchase_product",
								"type": "DatasetReference"
							},
							"name": "product"
						},
						{
							"dataset": {
								"referenceName": "purchase_customer",
								"type": "DatasetReference"
							},
							"name": "customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CosmosDbNoSqlPurchaseOrder",
								"type": "DatasetReference"
							},
							"name": "CosmosPurchaseOrder"
						}
					],
					"transformations": [
						{
							"name": "OrderProd"
						},
						{
							"name": "OrderProdCust"
						},
						{
							"name": "ColumnProjection"
						},
						{
							"name": "QualityCheck"
						}
					],
					"scriptLines": [
						"source(output(",
						"          purchase_id as string,",
						"          product_id as string,",
						"          qty as string,",
						"          cus_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> purcaseorder",
						"source(output(",
						"          product_id as string,",
						"          product_name as string,",
						"          price as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> product",
						"source(output(",
						"          cus_id as string,",
						"          cus_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"purcaseorder, product join(purcaseorder@product_id == product@product_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderProd",
						"OrderProd, customer join(purcaseorder@cus_id == customer@cus_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderProdCust",
						"OrderProdCust select(mapColumn(",
						"          purchase_id,",
						"          qty,",
						"          product_id = product@product_id,",
						"          product_name,",
						"          price,",
						"          cus_id = customer@cus_id,",
						"          cus_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ColumnProjection",
						"ColumnProjection filter(greater(toInteger(qty),0)) ~> QualityCheck",
						"QualityCheck sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          purchase_id as integer,",
						"          product as (product_id as integer, product_name as string, price as integer),",
						"          qty as integer,",
						"          customer as (cus_id as integer, cus_name as string)",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     format: 'document',",
						"     partitionKey: ['/cus_id'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id = purchase_id,",
						"          qty,",
						"          product_id,",
						"          product_name,",
						"          price,",
						"          cus_id,",
						"          cus_name",
						"     )) ~> CosmosPurchaseOrder"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Purchase_Agg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Purchase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"purcaseorder": {},
									"product": {},
									"customer": {},
									"StoreOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-26T19:42:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Purchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Purchase_CosmosDb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will send purchase order data to cosmos Db",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Purchase_CosmosDb",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"purcaseorder": {},
									"product": {},
									"customer": {},
									"CosmosPurchaseOrder": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-27T19:32:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Purchase_CosmosDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sql2Sql_Parameterized_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ETLTableMasterList",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ETLTableMasterList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ETLTableMasterList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sql2Sql_Parameterized_Child",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TableName_v": {
												"value": "@item().tablename",
												"type": "Expression"
											},
											"WaterMarkColumn_v": {
												"value": "@item().WaterMarkColumn",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-25T21:13:40Z"
			},
			"dependsOn": []
		}
	]
}
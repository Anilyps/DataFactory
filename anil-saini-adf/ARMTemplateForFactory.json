{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "anil-saini-adf"
		},
		"AzureDataLakeStgin_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStgin'"
		},
		"AzureDataLakeStgout_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStgout'"
		},
		"AzureSqlDbanil_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDbanil'"
		},
		"CosmosDbNoSql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbNoSql'"
		},
		"AzureDataLakeStgin_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://anilstgin.dfs.core.windows.net/"
		},
		"AzureDataLakeStgout_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://anilstgout.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Failure_Alert')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "Pipeline Failure",
							"errorCode": "1"
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Fail1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-20.southindia.logic.azure.com:443/workflows/141c88afe59d4903b2fd4707926df697/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=59KSZc1aNiXMpSdUlJv596VamqhwwMEfIv1Sg0zYxhA",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \n    \"receiver\" : \"@{pipeline().parameters.receiver}\"\n   }",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "anilyps@rediffmail.com"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-26T23:35:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Purchase_Agg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Purchase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"purcaseorder": {},
									"product": {},
									"customer": {},
									"StoreOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-26T19:42:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Purchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Purchase_CosmosDb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will send purchase order data to cosmos Db",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Purchase_CosmosDb",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"purcaseorder": {},
									"product": {},
									"customer": {},
									"CosmosPurchaseOrder": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-27T19:32:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Purchase_CosmosDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sql2Sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_oldwatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select tablename, watermarkvalue as old_watermark\nfrom [dbo].[watermarktable] where tablename='orders'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "lkp_newwatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(insertdatetime) as new_watermark\n from [dbo].[orders]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkp_oldwatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "lkp_newwatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select *\n from [dbo].[orders]\nwhere insertdatetime > '@{activity('lkp_oldwatermark').output.firstRow.old_watermark}'\nand insertdatetime <=  '@{activity('lkp_newwatermark').output.firstRow.new_watermark}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSql",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTarget",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "update_watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spSetWatermark]",
							"storedProcedureParameters": {
								"NewTime": {
									"value": {
										"value": "@{activity('lkp_newwatermark').output.firstRow.new_watermark}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "'@{activity('lkp_oldwatermark').output.firstRow.tablename}'",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbanil",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-25T19:33:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTarget')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbanil')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sql2Sql_Parameterized_Child')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_oldwatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select TableName,watermarkvalue as old_watermark\nfrom [dbo].[watermarktable] \nwhere tablename='@{pipeline().parameters.TableName_v}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "lkp_newwatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select max(@{pipeline().parameters.WaterMarkColumn_v}) as new_watermark\n from @{pipeline().parameters.TableName_v}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkp_oldwatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "lkp_newwatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select *\n from @{pipeline().parameters.TableName_v}\nwhere @{pipeline().parameters.WaterMarkColumn_v} > '@{activity('lkp_oldwatermark').output.firstRow.old_watermark}'\nand @{pipeline().parameters.WaterMarkColumn_v} <=  '@{activity('lkp_newwatermark').output.firstRow.new_watermark}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSql",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTarget_Parameterized",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@concat(pipeline().parameters.TableName_v, '_t')\n",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "update_watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spSetWatermark]",
							"storedProcedureParameters": {
								"NewTime": {
									"value": {
										"value": "@{activity('lkp_newwatermark').output.firstRow.new_watermark}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "'@{activity('lkp_oldwatermark').output.firstRow.tablename}'",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbanil",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName_v": {
						"type": "string",
						"defaultValue": "orders"
					},
					"WaterMarkColumn_v": {
						"type": "string",
						"defaultValue": "InsertDateTime"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-25T20:52:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTarget_Parameterized')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbanil')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sql2Sql_Parameterized_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ETLTableMasterList",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ETLTableMasterList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ETLTableMasterList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sql2Sql_Parameterized_Child",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TableName_v": {
												"value": "@item().tablename",
												"type": "Expression"
											},
											"WaterMarkColumn_v": {
												"value": "@item().WaterMarkColumn",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-25T21:13:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlConfigTable')]",
				"[concat(variables('factoryId'), '/pipelines/Sql2Sql_Parameterized_Child')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv2csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Airport",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Airport",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Flight",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Flight",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Carrier",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Carrier",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "BusinessDI",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BusinessDI",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "AWBBoundID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AWBBoundID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Origin",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Origin",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Destination",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Destination",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CargoTypeCommoditygroup",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CargoTypeCommoditygroup",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CustomerCategory",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CustomerCategory",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "VolumeTonnage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "VolumeTonnage",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "cargods",
								"type": "DatasetReference",
								"parameters": {
									"sourcefilename": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "cargodm",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-24T22:33:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cargods')]",
				"[concat(variables('factoryId'), '/datasets/cargodm')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv2csv_if_file_not_exists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check File Existence",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "cargodmdynamic",
								"type": "DatasetReference",
								"parameters": {
									"sourcefilename": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check File Existence",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check File Existence').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "cargods",
											"type": "DatasetReference",
											"parameters": {
												"sourcefilename": {
													"value": "@pipeline().parameters.FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "cargodm",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-24T22:59:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cargodmdynamic')]",
				"[concat(variables('factoryId'), '/datasets/cargods')]",
				"[concat(variables('factoryId'), '/datasets/cargodm')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbanil",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbanil')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlConfigTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbanil",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WaterMarkColumn",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ConfigurationTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbanil')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTarget')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbanil",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductID",
						"type": "varchar"
					},
					{
						"name": "CustomerID",
						"type": "varchar"
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 4
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsertDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "orders_t"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbanil')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTarget_Parameterized')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbanil",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbanil')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbNoSqlPurchaseOrder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbNoSql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"purchase_id": {
							"type": "integer"
						},
						"product": {
							"type": "object",
							"properties": {
								"product_id": {
									"type": "integer"
								},
								"product_name": {
									"type": "string"
								},
								"price": {
									"type": "integer"
								}
							}
						},
						"qty": {
							"type": "integer"
						},
						"customer": {
							"type": "object",
							"properties": {
								"cus_id": {
									"type": "integer"
								},
								"cus_name": {
									"type": "string"
								}
							}
						}
					}
				},
				"typeProperties": {
					"collectionName": "purchase_order"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbNoSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cargodm')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStgout",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "cargo-dm"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStgout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cargodmdynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStgout",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourcefilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().sourcefilename",
							"type": "Expression"
						},
						"fileSystem": "cargo-dm"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Airport",
						"type": "String"
					},
					{
						"name": "Flight",
						"type": "String"
					},
					{
						"name": "Carrier",
						"type": "String"
					},
					{
						"name": "BusinessDI",
						"type": "String"
					},
					{
						"name": "AWBBoundID",
						"type": "String"
					},
					{
						"name": "Origin",
						"type": "String"
					},
					{
						"name": "Destination",
						"type": "String"
					},
					{
						"name": "CargoTypeCommoditygroup",
						"type": "String"
					},
					{
						"name": "CustomerCategory",
						"type": "String"
					},
					{
						"name": "VolumeTonnage",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStgout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cargods')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStgin",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourcefilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().sourcefilename",
							"type": "Expression"
						},
						"fileSystem": "cargo-ds"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Airport",
						"type": "String"
					},
					{
						"name": "Flight",
						"type": "String"
					},
					{
						"name": "Carrier",
						"type": "String"
					},
					{
						"name": "BusinessDI",
						"type": "String"
					},
					{
						"name": "AWBBoundID",
						"type": "String"
					},
					{
						"name": "Origin",
						"type": "String"
					},
					{
						"name": "Destination",
						"type": "String"
					},
					{
						"name": "CargoTypeCommoditygroup",
						"type": "String"
					},
					{
						"name": "CustomerCategory",
						"type": "String"
					},
					{
						"name": "VolumeTonnage",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStgin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/purcase_order')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStgin",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "purchase_order.csv",
						"fileSystem": "purcase"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "purchase_id",
						"type": "String"
					},
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "qty",
						"type": "String"
					},
					{
						"name": "cus_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStgin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/purchase_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStgin",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer.csv",
						"fileSystem": "purcase"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cus_id",
						"type": "String"
					},
					{
						"name": "cus_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStgin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/purchase_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStgin",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "product.csv",
						"fileSystem": "purcase"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "product_name",
						"type": "String"
					},
					{
						"name": "price",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStgin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/purhcasedm')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStgout",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "purhcase"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStgout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStgin')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStgin_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStgin_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStgout')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStgout_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStgout_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDbanil')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDbanil_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbNoSql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbNoSql_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Purchase')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "purcase_order",
								"type": "DatasetReference"
							},
							"name": "purcaseorder"
						},
						{
							"dataset": {
								"referenceName": "purchase_product",
								"type": "DatasetReference"
							},
							"name": "product"
						},
						{
							"dataset": {
								"referenceName": "purchase_customer",
								"type": "DatasetReference"
							},
							"name": "customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "purhcasedm",
								"type": "DatasetReference"
							},
							"name": "StoreOutput"
						}
					],
					"transformations": [
						{
							"name": "OrderProd"
						},
						{
							"name": "OrderProdCust"
						},
						{
							"name": "ColumnProjection"
						},
						{
							"name": "QualityCheck"
						},
						{
							"name": "AddPurcaseValueCol"
						},
						{
							"name": "SumPurchaseValue"
						}
					],
					"scriptLines": [
						"source(output(",
						"          purchase_id as string,",
						"          product_id as string,",
						"          qty as string,",
						"          cus_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> purcaseorder",
						"source(output(",
						"          product_id as string,",
						"          product_name as string,",
						"          price as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> product",
						"source(output(",
						"          cus_id as string,",
						"          cus_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"purcaseorder, product join(purcaseorder@product_id == product@product_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderProd",
						"OrderProd, customer join(purcaseorder@cus_id == customer@cus_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderProdCust",
						"OrderProdCust select(mapColumn(",
						"          qty,",
						"          price,",
						"          cus_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ColumnProjection",
						"ColumnProjection filter(greater(toInteger(qty),0)) ~> QualityCheck",
						"QualityCheck derive(PurchaseValue = toInteger(qty)*toInteger(price)) ~> AddPurcaseValueCol",
						"AddPurcaseValueCol aggregate(groupBy(cus_name),",
						"     PurchaseValue = sum(PurchaseValue)) ~> SumPurchaseValue",
						"SumPurchaseValue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> StoreOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/purcase_order')]",
				"[concat(variables('factoryId'), '/datasets/purchase_product')]",
				"[concat(variables('factoryId'), '/datasets/purchase_customer')]",
				"[concat(variables('factoryId'), '/datasets/purhcasedm')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Purchase_CosmosDb')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "purcase_order",
								"type": "DatasetReference"
							},
							"name": "purcaseorder"
						},
						{
							"dataset": {
								"referenceName": "purchase_product",
								"type": "DatasetReference"
							},
							"name": "product"
						},
						{
							"dataset": {
								"referenceName": "purchase_customer",
								"type": "DatasetReference"
							},
							"name": "customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CosmosDbNoSqlPurchaseOrder",
								"type": "DatasetReference"
							},
							"name": "CosmosPurchaseOrder"
						}
					],
					"transformations": [
						{
							"name": "OrderProd"
						},
						{
							"name": "OrderProdCust"
						},
						{
							"name": "ColumnProjection"
						},
						{
							"name": "QualityCheck"
						}
					],
					"scriptLines": [
						"source(output(",
						"          purchase_id as string,",
						"          product_id as string,",
						"          qty as string,",
						"          cus_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> purcaseorder",
						"source(output(",
						"          product_id as string,",
						"          product_name as string,",
						"          price as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> product",
						"source(output(",
						"          cus_id as string,",
						"          cus_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"purcaseorder, product join(purcaseorder@product_id == product@product_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderProd",
						"OrderProd, customer join(purcaseorder@cus_id == customer@cus_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderProdCust",
						"OrderProdCust select(mapColumn(",
						"          purchase_id,",
						"          qty,",
						"          product_id = product@product_id,",
						"          product_name,",
						"          price,",
						"          cus_id = customer@cus_id,",
						"          cus_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ColumnProjection",
						"ColumnProjection filter(greater(toInteger(qty),0)) ~> QualityCheck",
						"QualityCheck sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          purchase_id as integer,",
						"          product as (product_id as integer, product_name as string, price as integer),",
						"          qty as integer,",
						"          customer as (cus_id as integer, cus_name as string)",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:true,",
						"     format: 'document',",
						"     partitionKey: ['/cus_id'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id = purchase_id,",
						"          qty,",
						"          product_id,",
						"          product_name,",
						"          price,",
						"          cus_id,",
						"          cus_name",
						"     )) ~> CosmosPurchaseOrder"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/purcase_order')]",
				"[concat(variables('factoryId'), '/datasets/purchase_product')]",
				"[concat(variables('factoryId'), '/datasets/purchase_customer')]",
				"[concat(variables('factoryId'), '/datasets/CosmosDbNoSqlPurchaseOrder')]"
			]
		}
	]
}